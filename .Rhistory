"PC2")], 5)
# Print results for PC1 and PC2
kable(top_5_PC1_high, col.names = c("Observation", "PC1 Score"),
caption = "Top 5 Observations with Highest PC1 Scores")
kable(top_5_PC1_low, col.names = c("Observation", "PC1 Score"),
caption = "Top 5 Observations with Lowest PC1 Scores")
kable(top_5_PC2_high, col.names = c("Observation", "PC2 Score"),
caption = "Top 5 Observations with Highest PC2 Scores")
kable(top_5_PC2_low, col.names = c("Observation", "PC2 Score"),
caption = "Top 5 Observations with Lowest PC2 Scores")
variance_PC1 <- var(pca_scores[, 1])
variance_PC2 <- var(pca_scores[, 2])
cat("Variance in scores of PC1:", variance_PC1)
cat("Variance in scores of PC2:", variance_PC2)
library(ISLR2)
library(tidyverse)
data("Boston")
standardized_Boston <- scale(Boston)
# Create a missing data pattern
missing_cols <- c("crim", "indus", "age", "dis", "tax", "medv")
missing_Boston <- standardized_Boston
for (col in missing_cols) {
missing_Boston[, col] <- ifelse(runif(nrow(missing_Boston)) < 0.2, NA, missing_Boston[, col])
}
# Ensure ~20% of data is missing in certain columns
summary(missing_Boston)
library(MASS)
library(imputeTS)
# Impute missing values using mean imputation
imputed_data <- missing_Boston
for (col in missing_cols) {
imputed_data[, col] <- na_mean(imputed_data[, col])
}
# Matrix completion with all components
completed_all <- prcomp(imputed_data, scale. = TRUE)
reconstructed_all <- (completed_all$x %*% t(completed_all$rotation) +
completed_all$center)
imputed_all_df <- data.frame(reconstructed_all)
# Matrix completion with 2 components
completed_2 <- prcomp(imputed_data, scale. = TRUE, rank. = 2)
reconstructed_2 <- completed_2$x %*% t(completed_2$rotation[, 1:2]) + completed_2$center
imputed_2_df <- data.frame(reconstructed_2)
# View first few rows of completed matrices for both approaches
head(imputed_all_df)
head(imputed_2_df)
for (col in missing_cols) {
# Identify the indices where the values are missing
missing_indices <- which(is.na(missing_Boston[, col]))
# Extract the real values for the missing data
real_values <- standardized_Boston[missing_indices, col]
# Extract the imputed values from both approaches for the missing data
imputed_values_all <- imputed_all_df[missing_indices, col]
imputed_values_2 <- imputed_2_df[missing_indices, col]
# Create plot
plot(missing_indices, real_values, type = "p", col = "blue",
main = paste("Imputation for", col),
ylab = "Standardized Values", xlab = "Missing Value Index", xlim = c(1, max(missing_indices)))
# Add the imputed values from both approaches to the plot
points(missing_indices, imputed_values_all, col = "red")
points(missing_indices, imputed_values_2, col = "green")
# Add a legend to differentiate the real and imputed values
legend("topright", legend = c("Real Values", "Imputed All Components", "Imputed 2 Components"),
col = c("blue", "red", "green"), pch = c(1, 1, 1))
}
# 7. Calculate Mean Squared Error (MSE) for both imputation methods
mse_all <- sapply(missing_cols, function(col) {
missing_indices <- which(is.na(missing_Boston[, col]))
real_values <- standardized_Boston[missing_indices, col]
imputed_values_all <- imputed_all_df[missing_indices, col]
mean((real_values - imputed_values_all)^2)
})
mse_2 <- sapply(missing_cols, function(col) {
missing_indices <- which(is.na(missing_Boston[, col]))
real_values <- standardized_Boston[missing_indices, col]
imputed_values_2 <- imputed_2_df[missing_indices, col]
mean((real_values - imputed_values_2)^2)
})
# Display the MSE for both approaches
mse_results <- data.frame(
Column = missing_cols,
MSE_All_Components = mse_all,
MSE_2_Components = mse_2
)
print(mse_results)
library(ISLR2)
library(tidyverse)
data("Boston")
standardized_Boston <- scale(Boston)
# Create a missing data pattern
missing_cols <- c("crim", "indus", "age", "dis", "tax", "medv")
missing_Boston <- standardized_Boston
for (col in missing_cols) {
missing_Boston[, col] <- ifelse(runif(nrow(missing_Boston)) < 0.2, NA, missing_Boston[, col])
}
# Ensure ~20% of data is missing in certain columns
summary(missing_Boston)
library(MASS)
library(imputeTS)
# Impute missing values using mean imputation
imputed_data <- missing_Boston
for (col in missing_cols) {
imputed_data[, col] <- na_mean(imputed_data[, col])
}
# Matrix completion with all components
completed_all <- prcomp(imputed_data, scale. = TRUE)
reconstructed_all <- (completed_all$x %*% t(completed_all$rotation) +
completed_all$center)
imputed_all_df <- data.frame(reconstructed_all)
# Matrix completion with 2 components
completed_2 <- prcomp(imputed_data, scale. = TRUE, rank. = 2)
reconstructed_2 <- completed_2$x %*% t(completed_2$rotation[, 1:2]) + completed_2$center
imputed_2_df <- data.frame(reconstructed_2)
# View first few rows of completed matrices for both approaches
head(imputed_all_df)
head(imputed_2_df)
for (col in missing_cols) {
# Identify the indices where the values are missing
missing_indices <- which(is.na(missing_Boston[, col]))
# Extract the real values for the missing data
real_values <- standardized_Boston[missing_indices, col]
# Extract the imputed values from both approaches for the missing data
imputed_values_all <- imputed_all_df[missing_indices, col]
imputed_values_2 <- imputed_2_df[missing_indices, col]
# Create plot
plot(missing_indices, real_values, type = "p", col = "blue",
main = paste("Imputation for", col),
ylab = "Standardized Values", xlab = "Missing Value Index", xlim = c(1, max(missing_indices)))
# Add the imputed values from both approaches to the plot
points(missing_indices, imputed_values_all, col = "red")
points(missing_indices, imputed_values_2, col = "green")
# Add a legend to differentiate the real and imputed values
legend("topright", legend = c("Real Values", "Imputed All Components", "Imputed 2 Components"),
col = c("blue", "red", "green"), pch = c(1, 1, 1))
}
# 7. Calculate Mean Squared Error (MSE) for both imputation methods
mse_all <- sapply(missing_cols, function(col) {
missing_indices <- which(is.na(missing_Boston[, col]))
real_values <- standardized_Boston[missing_indices, col]
imputed_values_all <- imputed_all_df[missing_indices, col]
mean((real_values - imputed_values_all)^2)
})
mse_2 <- sapply(missing_cols, function(col) {
missing_indices <- which(is.na(missing_Boston[, col]))
real_values <- standardized_Boston[missing_indices, col]
imputed_values_2 <- imputed_2_df[missing_indices, col]
mean((real_values - imputed_values_2)^2)
})
# Display the MSE for both approaches
mse_results <- data.frame(
Column = missing_cols,
MSE_All_Components = mse_all,
MSE_2_Components = mse_2
)
print(mse_results)
get.seed9)
get.seed()
# 7. Calculate Mean Squared Error (MSE) for both imputation methods
mse_all <- sapply(missing_cols, function(col) {
missing_indices <- which(is.na(missing_Boston[, col]))
real_values <- standardized_Boston[missing_indices, col]
imputed_values_all <- imputed_all_df[missing_indices, col]
mean((real_values - imputed_values_all)^2)
})
mse_2 <- sapply(missing_cols, function(col) {
missing_indices <- which(is.na(missing_Boston[, col]))
real_values <- standardized_Boston[missing_indices, col]
imputed_values_2 <- imputed_2_df[missing_indices, col]
mean((real_values - imputed_values_2)^2)
})
# Display the MSE for both approaches
mse_results <- data.frame(
Column = missing_cols,
MSE_All_Components = mse_all,
MSE_2_Components = mse_2
)
mse_combined <- cbind(mse_all, mse_2)
kable(mse_combined, col.names =c("Column with Missing Values", "All Components", "2 Components"),caption = "MSE of Matrix Completion Methods")
print(mse_results)
# 7. Calculate Mean Squared Error (MSE) for both imputation methods
mse_all <- sapply(missing_cols, function(col) {
missing_indices <- which(is.na(missing_Boston[, col]))
real_values <- standardized_Boston[missing_indices, col]
imputed_values_all <- imputed_all_df[missing_indices, col]
mean((real_values - imputed_values_all)^2)
})
mse_2 <- sapply(missing_cols, function(col) {
missing_indices <- which(is.na(missing_Boston[, col]))
real_values <- standardized_Boston[missing_indices, col]
imputed_values_2 <- imputed_2_df[missing_indices, col]
mean((real_values - imputed_values_2)^2)
})
mse_combined <- cbind(mse_all, mse_2)
kable(mse_combined, col.names =c("Missing Columns", "All Components", "2 Components"),caption = "MSE of Matrix Completion Methods")
cpi <- read_dta("~/Desktop/metrics_and_ml/Replication/cpi.dta")
cpi <- read_dta("~/Desktop/metrics_and_ml/Replication/cpi.dta")
cpi <- read_dta("~/Desktop/metrics_and_ml/Replication/cpi.dta")
cpi <- read_dta("~/Desktop/metrics_and_ml/Replication/cpi.dta")
cpi <- read_dta("~/Desktop/metrics_and_ml/Replication/cpi.dta")
head(cpi)
cex <- read_dta("~/Desktop/metrics_and_ml/Replication/CEX_sampleA_80_22.dta")
cpi <- read_dta("~/Desktop/metrics_and_ml/Replication/cpi.dta")
head(cpi)
cex <- read_dta("~/Desktop/metrics_and_ml/Replication/CEX_sampleA_80_22.dta")
print(dim(cex))
april2k <- read.csv("~/Desktop/metrics_and_ml/Replication/CPIAUCSL_april2000.csv")
head(april2k)
library(MASS)
library(imputeTS)
# Impute missing values using mean imputation
imputed_data <- missing_Boston
for (col in missing_cols) {
imputed_data[, col] <- na_mean(imputed_data[, col])
}
# Matrix completion with all components
completed_all <- prcomp(imputed_data, scale. = TRUE, rank. = 10)
reconstructed_all <- (completed_all$x %*% t(completed_all$rotation)[, 1:10] +
completed_all$center)
imputed_all_df <- data.frame(reconstructed_all)
# Matrix completion with 2 components
completed_2 <- prcomp(imputed_data, scale. = TRUE, rank. = 2)
reconstructed_2 <- (completed_2$x %*% t(completed_2$rotation[, 1:2]) +
completed_2$center)
imputed_2_df <- data.frame(reconstructed_2)
# View first few rows of completed matrices for both approaches
head(imputed_all_df)
head(imputed_2_df)
for (col in missing_cols) {
# Identify the indices where the values are missing
missing_indices <- which(is.na(missing_Boston[, col]))
# Extract the real values for the missing data
real_values <- standardized_Boston[missing_indices, col]
# Extract the imputed values from both approaches for the missing data
imputed_values_all <- imputed_all_df[missing_indices, col]
imputed_values_2 <- imputed_2_df[missing_indices, col]
# Create plot
plot(missing_indices, real_values, type = "p", col = "blue",
main = paste("Imputation for", col),
ylab = "Standardized Values", xlab = "Missing Value Index", xlim = c(1, max(missing_indices)))
# Add imputed values from both approaches
points(missing_indices, imputed_values_all, col = "red")
points(missing_indices, imputed_values_2, col = "green")
# Add legend
legend("topright", legend = c("Real Values", "Imputed All Components", "Imputed 2 Components"),
col = c("blue", "red", "green"), pch = c(1, 1, 1))
}
library(dplyr)
library(tidyr)
library(haven)
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
# Remove
cex <- cex[, colMeans(is.na(cex)) < 0.9]  # Keep columns with <50% missing
cex <- cex[rowMeans(is.na(cex)) < 0.9, ]  # Keep rows with <50% missing
cex <- cex %>%
mutate(across(where(is.numeric), ~replace_na(., median(., na.rm = TRUE)))) %>%
mutate(across(where(is.character), ~replace_na(., "Unknown")))
head(cex)
str(cex)
colSums(is.na(cex))
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
# Remove irrelevant variables
cex <- cex %>% select(-c(id, intnum))
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
# Remove irrelevant variables
cex <- cex %>% select(-c("id", "intnum"))
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
# Remove irrelevant variables
cex <- cex %>% select(-c(id, intnum))
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
# Remove irrelevant variables
cex <- cex %>% select(-id, -intnum)
class(cex)
View(cex)
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
cols_to_remove <- c("id", "intnum")
# Remove irrelevant variables
cex <- cex %>% select(-all_of(cols_to_remove)
cex <- cex[, colMeans(is.na(cex)) < 0.9]  # Keep columns with <50% missing
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
cols_to_remove <- c("id", "intnum")
# Remove irrelevant variables
cex <- cex %>% select(-all_of(cols_to_remove))
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
cex <- cex[, !names(cex) %in% c("id", "intnum")]
cols_to_remove <- c("id", "intnum")
# Remove irrelevant variables
cex <- cex %>% select(-all_of(cols_to_remove))
View(cex)
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
cols_to_remove <- c("Id", "intnum", "iearnx?", "relref", "age_ref", "age_spouse", "edu_spouse",
"edu_ref", "educa", "unemp", "farmincx_flag", "farmincm_flag", "ffrmincx",
"iearnm?", "inc_hrsq", "incweekq", "nondurx", "nonfarmx_flag", "nonfarmm_flag",
"region", "salaryx_flag", "salarym_flag", "selfempinx_flag", "selfempinm_flag",
"sex_ref", "sex_spouse", "state", "newid", "nbab", "nkids", "nmo15", "nmu15",
"nwo15", "nwu15", "educ0ref", "educa2_", "fedtaxx", "finlwt21?", "incnonw1", "incnonw2")
# Remove the columns
cex <- cex[, !names(cex) %in% cols_to_remove
# Remove irrelevant variables
cex <- cex[, !names(cex) %in% c("id", "intnum", "relref", "age_ref", "age_spouse", "edu_spouse", "edu_ref", "educa", "unemp", "farmincx_flag", "farmincm_flag")]
cpi <- read_dta("~/Desktop/metrics_and_ml/Replication/cpi.dta")
head(cpi)
cex <- read_dta("~/Desktop/metrics_and_ml/Replication/CEX_sampleA_80_22.dta")
print(dim(cex))
april2k <- read.csv("~/Desktop/metrics_and_ml/Replication/CPIAUCSL_april2000.csv")
head(april2k)
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
cex$straight <- ifelse(cex$sex_spouse != cex$sex_ref, 0, 1)
# Remove irrelevant variables
cols_to_remove <- c("Id", "intnum", "iearnx?", "relref", "age_ref", "age_spouse", "edu_spouse",
"edu_ref", "educa", "unemp", "farmincx_flag", "farmincm_flag", "ffrmincx",
"iearnm?", "inc_hrsq", "incweekq", "nondurx", "nonfarmx_flag", "nonfarmm_flag",
"region", "salaryx_flag", "salarym_flag", "selfempinx_flag", "selfempinm_flag",
"sex_ref", "sex_spouse", "state", "newid", "nbab", "nkids", "nmo15", "nmu15",
"nwo15", "nwu15", "educ0ref", "educa2_", "fedtaxx", "finlwt21?", "incnonw1", "incnonw2")
cex <- cex[, colMeans(is.na(cex)) < 0.9]  # Keep columns with <50% missing
cex <- cex[rowMeans(is.na(cex)) < 0.9, ]  # Keep rows with <50% missing
cex <- cex %>%
mutate(across(where(is.numeric), ~replace_na(., median(., na.rm = TRUE)))) %>%
mutate(across(where(is.character), ~replace_na(., "Unknown")))
head(cex)
str(cex)
colSums(is.na(cex))
dim(cex)
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
cex$straight <- ifelse(cex$sex_spouse != cex$sex_ref, 0, 1)
# Remove irrelevant variables
cols_to_remove <- c("Id", "intnum", "iearnx", "relref", "age_ref", "age_spouse", "edu_spouse",
"edu_ref", "educa", "unemp", "farmincx_flag", "farmincm_flag", "ffrmincx",
"iearnm?", "inc_hrsq", "incweekq", "nondurx", "nonfarmx_flag", "nonfarmm_flag",
"region", "salaryx_flag", "salarym_flag", "selfempinx_flag", "selfempinm_flag",
"sex_ref", "sex_spouse", "state", "newid", "nbab", "nkids", "nmo15", "nmu15",
"nwo15", "nwu15", "educ0ref", "educa2_", "fedtaxx", "finlwt21", "incnonw1", "incnonw2")
cex <- cex[, colMeans(is.na(cex)) < 0.9]  # Keep columns with <50% missing
cex <- cex[rowMeans(is.na(cex)) < 0.9, ]  # Keep rows with <50% missing
cex <- cex %>%
mutate(across(where(is.numeric), ~replace_na(., median(., na.rm = TRUE)))) %>%
mutate(across(where(is.character), ~replace_na(., "Unknown")))
head(cex)
str(cex)
colSums(is.na(cex))
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
cex$straight <- ifelse(cex$sex_spouse != cex$sex_ref, 0, 1)
# Remove irrelevant variables
cols_to_remove <- c("id", "intnum", "iearnx", "relref", "age_ref", "age_spouse", "edu_spouse",
"edu_ref", "educa", "unemp", "farmincx_flag", "farmincm_flag", "ffrmincx",
"iearnm?", "inc_hrsq", "incweekq", "nondurx", "nonfarmx_flag", "nonfarmm_flag",
"region", "salaryx_flag", "salarym_flag", "selfempinx_flag", "selfempinm_flag",
"sex_ref", "sex_spouse", "state", "newid", "nbab", "nkids", "nmo15", "nmu15",
"nwo15", "nwu15", "educ0ref", "educa2_", "fedtaxx", "finlwt21", "incnonw1", "incnonw2")
cex <- cex[, colMeans(is.na(cex)) < 0.9]  # Keep columns with <50% missing
cex <- cex[rowMeans(is.na(cex)) < 0.9, ]  # Keep rows with <50% missing
cex <- cex %>%
mutate(across(where(is.numeric), ~replace_na(., median(., na.rm = TRUE)))) %>%
mutate(across(where(is.character), ~replace_na(., "Unknown")))
head(cex)
str(cex)
colSums(is.na(cex))
dim(cex)
View(cex)
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
cex$straight <- ifelse(cex$sex_spouse != cex$sex_ref, 0, 1)
# Remove irrelevant variables
cols_to_remove <- c("id", "intnum", "iearnx", "relref", "age_ref", "age_spouse", "edu_spouse",
"edu_ref", "educa", "unemp", "farmincx_flag", "farmincm_flag", "ffrmincx",
"iearnm?", "inc_hrsq", "incweekq", "nondurx", "nonfarmx_flag", "nonfarmm_flag",
"region", "salaryx_flag", "salarym_flag", "selfempinx_flag", "selfempinm_flag",
"sex_ref", "sex_spouse", "state", "newid", "nbab", "nkids", "nmo15", "nmu15",
"nwo15", "nwu15", "educ0ref", "educa2_", "fedtaxx", "finlwt21", "incnonw1", "incnonw2")
cex <- cex[, !names(cex) %in% cols_to_remove]
cex <- cex[, colMeans(is.na(cex)) < 0.9]  # Keep columns with <50% missing
cex <- cex[rowMeans(is.na(cex)) < 0.9, ]  # Keep rows with <50% missing
cex <- cex %>%
mutate(across(where(is.numeric), ~replace_na(., median(., na.rm = TRUE)))) %>%
mutate(across(where(is.character), ~replace_na(., "Unknown")))
head(cex)
str(cex)
colSums(is.na(cex))
dim(cex)
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
cpi <- read_dta("~/Desktop/metrics_and_ml/Replication/cpi.dta")
head(cpi)
cex <- read_dta("~/Desktop/metrics_and_ml/Replication/CEX_sampleA_80_22.dta")
print(dim(cex))
april2k <- read.csv("~/Desktop/metrics_and_ml/Replication/CPIAUCSL_april2000.csv")
head(april2k)
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
cex$straight <- ifelse(cex$sex_spouse != cex$sex_ref, 0, 1)
# Remove irrelevant variables
cols_to_remove <- c("id", "intnum", "iearnx", "relref", "age_ref", "age_spouse", "edu_spouse",
"edu_ref", "educa", "unemp", "farmincx_flag", "farmincm_flag", "ffrmincx",
"iearnm?", "inc_hrsq", "incweekq", "nondurx", "nonfarmx_flag", "nonfarmm_flag",
"region", "salaryx_flag", "salarym_flag", "selfempinx_flag", "selfempinm_flag",
"sex_ref", "sex_spouse", "state", "newid", "nbab", "nkids", "nmo15", "nmu15",
"nwo15", "nwu15", "educ0ref", "educa2_", "fedtaxx", "finlwt21", "incnonw1", "incnonw2")
cex <- cex[, !names(cex) %in% cols_to_remove]
cex <- cex[, colMeans(is.na(cex)) < 0.5]  # Keep columns with <50% missing
cex <- cex[rowMeans(is.na(cex)) < 0.5, ]  # Keep rows with <50% missing
cex <- cex %>%
mutate(across(where(is.numeric), ~replace_na(., median(., na.rm = TRUE)))) %>%
mutate(across(where(is.character), ~replace_na(., "Unknown")))
head(cex)
str(cex)
colSums(is.na(cex))
dim(cex)
View(cex)
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
cpi <- read_dta("~/Desktop/metrics_and_ml/Replication/cpi.dta")
head(cpi)
cex <- read_dta("~/Desktop/metrics_and_ml/Replication/CEX_sampleA_80_22.dta")
print(dim(cex))
april2k <- read.csv("~/Desktop/metrics_and_ml/Replication/CPIAUCSL_april2000.csv")
head(april2k)
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
cex$straight <- ifelse(cex$sex_spouse != cex$sex_ref, 0, 1)
cex$White <- ifelse(cex$membrace == 1, 1, 0)
cex$Black <- ifelse(cex$membrace == 2, 1, 0)
cex$American_Indian <- ifelse(cex$membrace == 3, 1, 0)
cex$Asian <- ifelse(cex$membrace == 4, 1, 0)
cex$Native_Hawaiian <- ifelse(cex$membrace == 5, 1, 0)
# Remove irrelevant variables
cols_to_remove <- c("id", "intnum", "iearnx", "relref", "age_ref", "age_spouse", "edu_spouse",
"edu_ref", "educa", "unemp", "farmincx_flag", "farmincm_flag", "ffrmincx",
"iearnm?", "inc_hrsq", "incweekq", "nondurx", "nonfarmx_flag", "nonfarmm_flag",
"region", "salaryx_flag", "salarym_flag", "selfempinx_flag", "selfempinm_flag",
"sex_ref", "sex_spouse", "state", "newid", "nbab", "nkids", "nmo15", "nmu15",
"nwo15", "nwu15", "educ0ref", "educa2_", "fedtaxx", "finlwt21", "incnonw1", "incnonw2")
cex_clean <- cex[, !names(cex) %in% cols_to_remove]
# Remove columns with over 50% NAs
cex_clean <- cex_clean[, colMeans(is.na(cex)) < 0.5]
# Remove irrelevant variables
cols_to_remove <- c("id", "intnum", "iearnx", "relref", "age_ref", "age_spouse", "edu_spouse",
"edu_ref", "educa", "unemp", "farmincx_flag", "farmincm_flag", "ffrmincx",
"iearnm?", "inc_hrsq", "incweekq", "nondurx", "nonfarmx_flag", "nonfarmm_flag",
"region", "salaryx_flag", "salarym_flag", "selfempinx_flag", "selfempinm_flag",
"sex_ref", "sex_spouse", "state", "newid", "nbab", "nkids", "nmo15", "nmu15",
"nwo15", "nwu15", "educ0ref", "educa2_", "fedtaxx", "finlwt21", "incnonw1", "incnonw2")
cex_clean <- cex[, !names(cex) %in% cols_to_remove]
# Remove columns with over 50% NAs
cex_clean <- cex_clean[, colMeans(is.na(cex_clean)) < 0.5]
cex_clean <- cex_clean[rowMeans(is.na(cex_clean)) < 0.5, ]
cex_clean <- cex_clean %>%
mutate(across(where(is.numeric), ~replace_na(., median(., na.rm = TRUE)))) %>%
mutate(across(where(is.character), ~replace_na(., "Unknown")))
head(cex_clean)
library(dplyr)
library(tidyr)
library(haven)
library(glmnet)
library(dplyr)
library(tidyr)
library(haven)
library(glmnet)
X <- as.matrix(cex_clean[, setdiff(names(cex_clean), "dye")])
X <- as.matrix(cex_clean[, setdiff(names(cex_clean), "dye")])
Y <- cex_clean$dye
lasso <- cv.glmnet(X, Y, alpha = 1)
print(lasso$lambda.min)
plot(lasso_model)
knitr::opts_chunk$set(echo = TRUE)
X <- as.matrix(cex_clean[, setdiff(names(cex_clean), "totexp")])
library(dplyr)
library(tidyr)
library(haven)
library(glmnet)
cpi <- read_dta("~/Desktop/metrics_and_ml/Replication/cpi.dta")
head(cpi)
cex <- read_dta("~/Desktop/metrics_and_ml/Replication/CEX_sampleA_80_22.dta")
print(dim(cex))
april2k <- read.csv("~/Desktop/metrics_and_ml/Replication/CPIAUCSL_april2000.csv")
head(april2k)
# Add relevant dummy variables
cex$married <- ifelse(!is.na(cex$age_spouse), 1, 0)
cex$straight <- ifelse(cex$sex_spouse != cex$sex_ref, 0, 1)
cex$White <- ifelse(cex$membrace == 1, 1, 0)
cex$Black <- ifelse(cex$membrace == 2, 1, 0)
cex$American_Indian <- ifelse(cex$membrace == 3, 1, 0)
cex$Asian <- ifelse(cex$membrace == 4, 1, 0)
cex$Native_Hawaiian <- ifelse(cex$membrace == 5, 1, 0)
# Remove irrelevant variables
cols_to_remove <- c("id", "intnum", "iearnx", "relref", "age_ref", "age_spouse", "edu_spouse",
"edu_ref", "educa", "unemp", "farmincx_flag", "farmincm_flag", "ffrmincx",
"iearnm?", "inc_hrsq", "incweekq", "nondurx", "nonfarmx_flag", "nonfarmm_flag",
"region", "salaryx_flag", "salarym_flag", "selfempinx_flag", "selfempinm_flag",
"sex_ref", "sex_spouse", "state", "newid", "nbab", "nkids", "nmo15", "nmu15",
"nwo15", "nwu15", "educ0ref", "educa2_", "fedtaxx", "finlwt21", "incnonw1", "incnonw2")
cex_clean <- cex[, !names(cex) %in% cols_to_remove]
# Remove columns with over 50% NAs
cex_clean <- cex_clean[, colMeans(is.na(cex_clean)) < 0.5]
cex_clean <- cex_clean[rowMeans(is.na(cex_clean)) < 0.5, ]
cex_clean <- cex_clean %>%
mutate(across(where(is.numeric), ~replace_na(., median(., na.rm = TRUE)))) %>%
mutate(across(where(is.character), ~replace_na(., "Unknown")))
head(cex_clean)
X <- as.matrix(cex_clean[, setdiff(names(cex_clean), "totexp")])
Y <- cex_clean$totexp
lasso <- cv.glmnet(X, Y, alpha = 1)
